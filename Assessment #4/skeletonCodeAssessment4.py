import random
from gtts import gTTS
import os

# Sample patient database with language, preferred communication channel, and age
patients = [
    {"id": 1, "name": "Ravi Kumar", "language": "Tamil", "channel": "SMS", "age": 65},
    {"id": 2, "name": "Ananya Rao", "language": "Telugu", "channel": "WhatsApp", "age": 30},
    {"id": 3, "name": "Joseph Mathew", "language": "Malayalam", "channel": "IVR", "age": 70},
    {"id": 4, "name": "Rahul Sharma", "language": "Hindi", "channel": "SMS", "age": 50},
    {"id": 5, "name": "David Thomas", "language": "English", "channel": "WhatsApp", "age": 25},
]

# Multi-language template management
messages = {
    "Tamil": ["роЙроЩрпНроХро│рпН роирпЗро░роорпН роЙро▒рпБродро┐роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ. родропро╡рпБроЪрпЖропрпНродрпБ ро╡ро░рпБроХ!", "роЙроЩрпНроХро│рпН роЪроирпНродро┐рокрпНрокрпБ роиро╛ро│рпИ. родропро╡рпБроЪрпЖропрпНродрпБ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродро╡рпБроорпН!"],
    "Telugu": ["р░ор▒А р░ир░┐р░пр░╛р░ор░Хр░В р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐. р░жр░пр░Ър▒Зр░╕р░┐ р░░р░Вр░бр░┐!", "р░ор▒А р░╕р░ор░╛р░╡р▒Зр░╢р░В р░░р▒Зр░кр▒Б р░Йр░Вр░жр░┐. р░жр░пр░Ър▒Зр░╕р░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░Вр░бр░┐!"],
    "Malayalam": ["р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤кр╡Лр┤пр┤┐р┤ир╡Нр┤▒р╡Нр┤ор╡Жр┤ир╡Нр┤▒р╡Н р┤╕р╡Нр┤ер┤┐р┤░р╡Ар┤Хр┤░р┤┐р┤Ър╡Нр┤Ър┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╡р┤░р╡В!", "р┤ир┤╛р┤│р╡Ж р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤пр╡Лр┤Чр┤В. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╕р╡Нр┤ер┤┐р┤░р╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х!"],
    "Hindi": ["рдЖрдкрдХрд╛ рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рдХрдиреНрдлрд░реНрдо рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдЖрдПрдВ!", "рдЖрдкрдХреА рдореБрд▓рд╛рдХрд╛рдд рдХрд▓ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ!"],
    "English": ["Your appointment is confirmed. Please visit!", "Your meeting is tomorrow. Please confirm!"]
}

wait_time_updates = {
    "Tamil": "роЙроЩрпНроХро│рпН роХро╛родрпНродро┐ро░рпБрокрпНрокрпБ роирпЗро░роорпН: 15 роиро┐рооро┐роЯроЩрпНроХро│рпН",
    "Telugu": "р░ор▒А р░╡р▒Жр░пр░┐р░Яр▒Н р░Яр▒Ир░В: 15 р░ир░┐р░ор░┐р░╖р░╛р░▓р▒Б",
    "Malayalam": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр┤╛р┤др╡Нр┤др┤┐р┤░р┤┐р┤кр╡Нр┤кр╡Н р┤╕р┤ор┤пр┤В: 15 р┤ор┤┐р┤ир┤┐р┤▒р╡Нр┤▒р╡Н",
    "Hindi": "рдЖрдкрдХрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рд╕рдордп: 15 рдорд┐рдирдЯ",
    "English": "Your wait time: 15 minutes"
}

prescription_alerts = {
    "Tamil": "роЙроЩрпНроХро│рпН рооро░рпБроирпНродрпБ роорпАро│рокрпНрокро╛ро░рпНро╡рпИ родрпЗро╡рпИ!",
    "Telugu": "р░ор▒А р░ор░Вр░жр▒Бр░▓ р░кр▒Бр░ир░Гр░╕р░ор▒Ар░Хр▒Нр░╖ р░Ер░╡р░╕р░░р░В!",
    "Malayalam": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Фр┤╖р┤з р┤кр╡Бр┤ир┤Гр┤кр┤░р┤┐р┤╢р╡Лр┤зр┤и р┤Жр┤╡р┤╢р╡Нр┤пр┤ор┤╛р┤гр╡Н!",
    "Hindi": "рдЖрдкрдХреА рджрд╡рд╛ рдХреА рд╕рдореАрдХреНрд╖рд╛ рдЖрд╡рд╢реНрдпрдХ рд╣реИ!",
    "English": "Your prescription review is needed!"
}

# Function to send messages with A/B Testing
def send_message(patient, message_type="Appointment Confirmation"):
    """Simulate sending a message based on patient language and preferred channel"""
    language = patient["language"]
    channel = patient["channel"]
    message = random.choice(messages.get(language, messages["English"]))  # A/B Testing
    
    if channel == "IVR":
        text_to_speech(message, language, patient["name"])
    else:
        print(f"ЁЯУй {message_type} via {channel} to {patient['name']} ({language}): {message}")

# Function to send wait time updates
def send_wait_time_update(patient):
    message = wait_time_updates.get(patient["language"], wait_time_updates["English"])
    send_message(patient, "Wait Time Update")

# Function to send prescription alerts
def send_prescription_alert(patient):
    message = prescription_alerts.get(patient["language"], prescription_alerts["English"])
    send_message(patient, "Prescription Alert")

# Function to generate voice messages for IVR
def text_to_speech(text, language, name):
    lang_map = {"Tamil": "ta", "Telugu": "te", "Malayalam": "ml", "Hindi": "hi", "English": "en"}
    tts = gTTS(text=text, lang=lang_map.get(language, "en"))
    filename = f"ivr_message_{name}.mp3"
    tts.save(filename)
    os.system(f"start {filename}")  # Plays the message
    print(f"ЁЯУЮ IVR Call Sent to {name} in {language}.")

# Function to collect patient feedback
def collect_feedback():
    """Simulates patient feedback collection"""
    feedback_responses = ["Very clear", "Somewhat clear", "Difficult to understand", "No response"]
    feedback_data = {patient["name"]: random.choice(feedback_responses) for patient in patients}
    print("\nЁЯУК Patient Feedback Survey Results:")
    for name, feedback in feedback_data.items():
        print(f"ЁЯЧгя╕П {name}: {feedback}")
    return feedback_data

# Send messages to all patients
for patient in patients:
    send_message(patient)
    send_wait_time_update(patient)
    send_prescription_alert(patient)

# Effectiveness measurement: track confirmations and satisfaction
def measure_effectiveness():
    """Simulates confirmation tracking and A/B testing"""
    confirmed = sum(random.choices([0, 1], k=len(patients)))  # Random confirmations
    confirmation_rate = (confirmed / len(patients)) * 100
    print(f"тЬЕ Confirmation Rate: {confirmation_rate:.2f}%")

measure_effectiveness()
collect_feedback()
